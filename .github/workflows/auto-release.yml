name: Auto Release on Version Bump

on:
  push:
    branches: [ main ]
    paths: 
      - 'Influx/Influx.csproj'
  workflow_dispatch:
    inputs:
      force_release:
        description: 'Force create release even if tag exists'
        required: false
        default: false
        type: boolean

permissions:
  contents: write

jobs:
  detect-version-change:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      should-release: ${{ steps.check-release.outputs.should-release }}
      tag-exists: ${{ steps.check-tag.outputs.exists }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version from Influx.csproj
        id: get-version
        run: |
          # Extract version using xmllint for more reliable parsing
          if command -v xmllint >/dev/null 2>&1; then
            VERSION=$(xmllint --xpath "string(//PropertyGroup/Version)" Influx/Influx.csproj 2>/dev/null || true)
          fi
          
          # Fallback to grep if xmllint fails or is not available
          if [ -z "$VERSION" ]; then
            VERSION=$(grep -oP '<Version>\K[^<]+' Influx/Influx.csproj | head -1)
          fi
          
          if [ -z "$VERSION" ]; then
            echo "Error: Could not extract version from Influx/Influx.csproj"
            exit 1
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Detected version: $VERSION"

      - name: Check if tag already exists
        id: check-tag
        run: |
          TAG="v${{ steps.get-version.outputs.version }}"
          if git ls-remote --tags origin | grep -q "refs/tags/$TAG$"; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Tag $TAG already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Tag $TAG does not exist"
          fi

      - name: Determine if release should be created
        id: check-release
        run: |
          FORCE_RELEASE="${{ github.event.inputs.force_release }}"
          TAG_EXISTS="${{ steps.check-tag.outputs.exists }}"
          
          if [ "$FORCE_RELEASE" = "true" ] || [ "$TAG_EXISTS" = "false" ]; then
            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "Will create release"
          else
            echo "should-release=false" >> $GITHUB_OUTPUT
            echo "Will not create release (tag exists and not forced)"
          fi

  build-and-release:
    needs: detect-version-change
    if: needs.detect-version-change.outputs.should-release == 'true'
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.detect-version-change.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Download and setup Dalamud
        run: |
          echo "Downloading Dalamud..."
          wget -q https://goatcorp.github.io/dalamud-distrib/stg/latest.zip -O dalamud.zip
          unzip -q dalamud.zip -d .dalamud
          echo "DALAMUD_HOME=$PWD/.dalamud/" >> $GITHUB_ENV

      - name: Restore NuGet packages
        run: |
          dotnet restore /p:Configuration=Release --packages .nuget

      - name: Build plugin
        run: |
          echo "Building plugin..."
          dotnet build Influx/Influx.csproj \
            -c Release \
            -f net9.0-windows \
            -p:DalamudLibPath=$DALAMUD_HOME \
            -maxcpucount:1 \
            --source $PWD/.nuget \
            --no-restore \
            --verbosity minimal

      - name: Prepare release artifacts
        run: |
          echo "Preparing release artifacts..."
          mkdir -p release
          
          # Check if build outputs exist and copy only specific files
          if [ -f "Influx/dist/Influx/latest.zip" ]; then
            cp "Influx/dist/Influx/latest.zip" "release/latest.zip"
            echo "Copied plugin zip"
          else
            echo "Warning: latest.zip not found"
          fi
          
          if [ -f "Influx/dist/Influx/Influx.json" ]; then
            cp "Influx/dist/Influx/Influx.json" "release/Influx.json"
            echo "Copied plugin manifest"
          else
            echo "Warning: Influx.json not found"
          fi
          
          # Verify only intended files are present
          echo "Release artifacts (should only contain .zip and .json files):"
          ls -la release/
          
          # Remove any potential source files that might have been copied accidentally
          find release/ -name "*.cs" -o -name "*.csproj" -o -name "*.sln" -o -name "*.targets" -o -name "*.props" | xargs rm -f
          
          echo "Final release artifacts:"
          ls -la release/

      - name: Create and push tag
        run: |
          TAG="v${VERSION}"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Delete tag if it exists (for force release)
          if [ "${{ needs.detect-version-change.outputs.tag-exists }}" = "true" ]; then
            echo "Deleting existing tag $TAG"
            git tag -d $TAG || true
            git push origin :refs/tags/$TAG || true
          fi
          
          git tag $TAG -m "Release version ${VERSION}"
          git push origin $TAG

      - name: Create GitHub Release (without source code archives)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create the release using GitHub CLI to have more control
          gh release create "v${VERSION}" \
            --title "Influx v${VERSION}" \
            --notes "## Influx v${VERSION}

          This release was automatically created following a version bump.

          ### Installation Files
          - \`latest.zip\` - **Plugin archive for installation**
          - \`Influx.json\` - Plugin manifest

          Please download the \`latest.zip\` file to install or update the plugin." \
            --repo ${{ github.repository }} \
            release/latest.zip \
            release/Influx.json